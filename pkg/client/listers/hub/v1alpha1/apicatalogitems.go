/*
The GNU AFFERO GENERAL PUBLIC LICENSE

Copyright (c) 2020-2024 Traefik Labs

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/traefik/hub-crds/pkg/apis/hub/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// APICatalogItemsLister helps list APICatalogItemses.
// All objects returned here must be treated as read-only.
type APICatalogItemsLister interface {
	// List lists all APICatalogItemses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.APICatalogItems, err error)
	// APICatalogItemses returns an object that can list and get APICatalogItemses.
	APICatalogItemses(namespace string) APICatalogItemsNamespaceLister
	APICatalogItemsListerExpansion
}

// aPICatalogItemsLister implements the APICatalogItemsLister interface.
type aPICatalogItemsLister struct {
	indexer cache.Indexer
}

// NewAPICatalogItemsLister returns a new APICatalogItemsLister.
func NewAPICatalogItemsLister(indexer cache.Indexer) APICatalogItemsLister {
	return &aPICatalogItemsLister{indexer: indexer}
}

// List lists all APICatalogItemses in the indexer.
func (s *aPICatalogItemsLister) List(selector labels.Selector) (ret []*v1alpha1.APICatalogItems, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.APICatalogItems))
	})
	return ret, err
}

// APICatalogItemses returns an object that can list and get APICatalogItemses.
func (s *aPICatalogItemsLister) APICatalogItemses(namespace string) APICatalogItemsNamespaceLister {
	return aPICatalogItemsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// APICatalogItemsNamespaceLister helps list and get APICatalogItemses.
// All objects returned here must be treated as read-only.
type APICatalogItemsNamespaceLister interface {
	// List lists all APICatalogItemses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.APICatalogItems, err error)
	// Get retrieves the APICatalogItems from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.APICatalogItems, error)
	APICatalogItemsNamespaceListerExpansion
}

// aPICatalogItemsNamespaceLister implements the APICatalogItemsNamespaceLister
// interface.
type aPICatalogItemsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all APICatalogItemses in the indexer for a given namespace.
func (s aPICatalogItemsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.APICatalogItems, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.APICatalogItems))
	})
	return ret, err
}

// Get retrieves the APICatalogItems from the indexer for a given namespace and name.
func (s aPICatalogItemsNamespaceLister) Get(name string) (*v1alpha1.APICatalogItems, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apicatalogitems"), name)
	}
	return obj.(*v1alpha1.APICatalogItems), nil
}
