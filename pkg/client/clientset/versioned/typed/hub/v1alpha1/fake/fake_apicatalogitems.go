/*
The GNU AFFERO GENERAL PUBLIC LICENSE

Copyright (c) 2020-2024 Traefik Labs

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/traefik/hub-crds/pkg/apis/hub/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAPICatalogItemses implements APICatalogItemsInterface
type FakeAPICatalogItemses struct {
	Fake *FakeHubV1alpha1
	ns   string
}

var apicatalogitemsesResource = v1alpha1.SchemeGroupVersion.WithResource("apicatalogitemses")

var apicatalogitemsesKind = v1alpha1.SchemeGroupVersion.WithKind("APICatalogItems")

// Get takes name of the aPICatalogItems, and returns the corresponding aPICatalogItems object, and an error if there is any.
func (c *FakeAPICatalogItemses) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.APICatalogItems, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(apicatalogitemsesResource, c.ns, name), &v1alpha1.APICatalogItems{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.APICatalogItems), err
}

// List takes label and field selectors, and returns the list of APICatalogItemses that match those selectors.
func (c *FakeAPICatalogItemses) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.APICatalogItemsList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(apicatalogitemsesResource, apicatalogitemsesKind, c.ns, opts), &v1alpha1.APICatalogItemsList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.APICatalogItemsList{ListMeta: obj.(*v1alpha1.APICatalogItemsList).ListMeta}
	for _, item := range obj.(*v1alpha1.APICatalogItemsList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested aPICatalogItemses.
func (c *FakeAPICatalogItemses) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(apicatalogitemsesResource, c.ns, opts))

}

// Create takes the representation of a aPICatalogItems and creates it.  Returns the server's representation of the aPICatalogItems, and an error, if there is any.
func (c *FakeAPICatalogItemses) Create(ctx context.Context, aPICatalogItems *v1alpha1.APICatalogItems, opts v1.CreateOptions) (result *v1alpha1.APICatalogItems, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(apicatalogitemsesResource, c.ns, aPICatalogItems), &v1alpha1.APICatalogItems{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.APICatalogItems), err
}

// Update takes the representation of a aPICatalogItems and updates it. Returns the server's representation of the aPICatalogItems, and an error, if there is any.
func (c *FakeAPICatalogItemses) Update(ctx context.Context, aPICatalogItems *v1alpha1.APICatalogItems, opts v1.UpdateOptions) (result *v1alpha1.APICatalogItems, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(apicatalogitemsesResource, c.ns, aPICatalogItems), &v1alpha1.APICatalogItems{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.APICatalogItems), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeAPICatalogItemses) UpdateStatus(ctx context.Context, aPICatalogItems *v1alpha1.APICatalogItems, opts v1.UpdateOptions) (*v1alpha1.APICatalogItems, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(apicatalogitemsesResource, "status", c.ns, aPICatalogItems), &v1alpha1.APICatalogItems{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.APICatalogItems), err
}

// Delete takes name of the aPICatalogItems and deletes it. Returns an error if one occurs.
func (c *FakeAPICatalogItemses) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(apicatalogitemsesResource, c.ns, name, opts), &v1alpha1.APICatalogItems{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAPICatalogItemses) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(apicatalogitemsesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.APICatalogItemsList{})
	return err
}

// Patch applies the patch and returns the patched aPICatalogItems.
func (c *FakeAPICatalogItemses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.APICatalogItems, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(apicatalogitemsesResource, c.ns, name, pt, data, subresources...), &v1alpha1.APICatalogItems{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.APICatalogItems), err
}
